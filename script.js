window.addEventListener('load', startGame);

let boardEl = document.getElementById('board');
let modalEl = document.getElementById('modal');
let resetButtons = document.getElementsByClassName('reset');

for (let btn of resetButtons) {
  btn.addEventListener('click', function () {
    if (!modalEl.classList.contains('hidden')) {
      modalEl.classList.add('hidden');
    }
    startGame();
  });
}

boardEl.addEventListener('click', function (event) {
  let targetClasses = event.target.classList;
  let targetData = event.target.dataset;
  if (targetClasses.contains('field') && !targetClasses.contains('busy')) {
    click(targetData.row, targetData.col);
  }
});

function showWinner(winner) {
  let header = modalEl.getElementsByTagName('h2')[0];
  header.textContent = `üçæ Won Player ‚Ññ${winner + 1}! üçæ`;
  modalEl.classList.remove('hidden');
}

function renderBoard(board) {
  const fields = [];
  for (let [i, row] of board.entries()) {
    for (let [j, value] of row.entries()) {
      fields.push(`
        <div class="field ${value ? 'busy' : 'free'}" 
            data-row="${i}" 
            data-col="${j}"
            style="grid-row:${i + 1};grid-column:${j + 1};"
        >
          ${value || ''}
        </div>
      `);
    }
  }
  boardEl.innerHTML = fields.join('');
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////// UI //////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////

let players = ['x', 'o'];
let activePlayer = 0;
let board = [
  ['', '', ''],
  ['', '', ''],
  ['', '', '']
];
let turn = 0;

// –≤—ã–π–≥—Ä—ã—à–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –≤—ã–π–≥—Ä—ã—à–Ω—ã—Ö # –∏–Ω–¥–µ–∫—Å–∞—Ö –¥–ª—è board
const winCombos = [
[0, 1, 2],
[3, 4, 5],
[6, 7, 8],
[0, 3, 6], 
[1, 4, 7],
[2, 5, 8],
[0, 4, 8],
[2, 4, 6]
];

// –≤ –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –º—ã –¥–µ–∫–ª–∞—Ä–∏—Ä—É–µ–º variable won –∏ –ø—Ä–∏—Ä–∞–≤–Ω–∏–≤–∞–µ–º –µ–µ –∫ –∑–Ω–∞—á–µ–Ω–∏—é false

// –∏—Ç–µ—Ä–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –≤—ã–π–≥—Ä—ã—à–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å—Ä–∞–≤–Ω–∏–≤–∞—è –∏—Ö —Å —Ç–µ–º —á—Ç–æ –µ—Å—Ç—å –Ω–∞ board (–∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ flat() —á—Ç–æ–±—ã —á–µ—Ä–µ–∑ –Ω–µ–≥–æ –±—ã–ª–æ –ª–µ–≥—á–µ –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ —Å—Ä–∞–≤–Ω–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏)

// —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (–ø—Ä–æ—Å—Ç–æ —Ç–∞–∫ –ø—Ä–æ—â–µ)
// –∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –æ–¥–Ω–∞ –∏–∑ –∫–ª–µ—Ç–æ—á–µ–∫ –≤ —Ç–µ–∫—É—â–µ–π –≤—ã–π–≥—Ä–∞—à–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –Ω–∞ board —è–≤–ª—è–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Ç–æ —Ç–æ–≥–¥–∞ –º—ã –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ
// –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –≤—ã–π–≥—Ä—ã—à–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ board –µ—Å–ª–∏ –¥–∞ —Ç–æ –ø—Ä–∏—Å–≤–∞–µ–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ true to won

//–¥–∞–ª–µ–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ —Ç–∞–∫–∏ –≤—ã–π–≥—Ä–∞–ª –µ—Å–ª–∏ –¥–∞ —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞

function getWinner() {
    let won = false;
    for (let i = 0; i <= 7; i++) {
        const winCombo = winCombos[i];
        let a = board.flat()[winCombo[0]];
        let b = board.flat()[winCombo[1]];
        let c = board.flat()[winCombo[2]];
        if (a === '' || b === '' || c === '') {
            continue;
        }
        if (a === b && b === c) {
            won = true;
            break
        }
    }
if (won) {
        showWinner(activePlayer);
        return;
    }
}

// —Ä–∏—Å—É–µ–º board, –Ω–∞—á–∏–Ω–∞–µ–º —Å—á–µ—Ç—á–∏–∫
function startGame() {
board = [
  ['', '', ''],
  ['', '', ''],
  ['', '', '']
];
renderBoard(board);
turn = 0;
};


// –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —á–∏—Å–ª–æ –≤ turn —á–µ—Ç–Ω–æ–µ —Ç–æ —Ç–æ–≥–¥–∞ –ø—Ä–∏—Å–≤–∞–µ–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∏–≥—Ä–æ–∫—É 0
// –µ—Å–ª–∏ –Ω–µ—á–µ—Ç–Ω–æ–µ —Ç–æ –∏–≥—Ä–æ–∫—É 1
// –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º —à–∞–≥ –Ω–∞ –ø–æ–ª–µ
// –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º board —Å –Ω–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
// –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –≤—ã–π–≥—Ä–∞–ª

function click(row, col) {
  if (turn % 2 === 0) {
    activePlayer = 0;
  } else {
    activePlayer = 1;
  }

  board[row][col] = players[activePlayer];
  turn++;
  renderBoard(board);
  getWinner();
};



